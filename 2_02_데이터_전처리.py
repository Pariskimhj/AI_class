# -*- coding: utf-8 -*-
"""2-02 데이터 전처리.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ajytcg48i2wNP-RnA2z_4m3bK1VJuiPN

도미, 빙어의 길이, 무게 데이터
"""

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

import numpy as np

"""column_stack() 함수는 각각의 리스트를 위치에 맞게 array로 만들어줌"""

np.column_stack(([1,2,3],[4,5,6]))

"""length와 weight를 합쳐서 하나의 array 형태로 만들기"""

fish_data = np.column_stack((fish_length, fish_weight))

print(fish_data[:5])

"""np.ones(n) : n개의 1 생성
np.zeros(n) : n개의 0 생성
"""

print(np.ones(5))

"""np.concatenate() 괄호 내부의 값을 옆으로 붙여 array로 반환"""

fish_target = np.concatenate((np.ones(35), np.zeros(14)))

print(fish_target)

"""train_test_split : 알아서 적절히 train data와 test data로 나눠줌"""

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, random_state=42)

"""shape : train data, test data의 array 배열 확인"""

print(train_input.shape, test_input.shape)

print(train_target.shape,test_target.shape)

print(test_target)

"""stratify=타깃데이터, 클래스의 비율에 맞게 데이터를 나눠줌"""

train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, stratify=fish_target, random_state=42)

"""test_target이 클래스의 비율에 맞게 다시 나눠짐"""

print(test_target)

"""KNeighborsClassifier 모델 사용해서 train데이터 학습 후 score로 정확도 추출"""

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
kn.score(test_input, test_target)

print(kn.predict([[25, 150]]))

"""새로운 값 [25, 150]을 산점도에 표시"""

import matplotlib.pyplot as plt
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

"""25, 150에서 가장 가까운 이웃 5개의 index 값과 distance를 리턴"""

distances, indexes = kn.kneighbors([[25, 150]])

"""가장 가까운 5개의 값을 D(마름모)꼴로 그리기
test_data는 길이 25, 무게 150이고 ^(세모)로 그리기
"""

plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25, 150, marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(train_input[indexes])

print(train_target[indexes])

print(distances)

"""x축의 값을 y축과 같이 0~1000으로 설정(애초에 축의 범위가 달랐기 때문에 가장 가까운 이웃이 올바른 값으로 나올 수 없었음)

x축의 영향보다 y축에 영향을 받음
"""

plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25, 150, marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1], marker='D')
plt.xlim((0, 1000))
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

"""데이터 표준화 하기 : 비교하는 값의 scale이 다르면 이상한 결과값이 나오기 때문

(데이터 - 평균) / 표준편차
"""

mean = np.mean(train_input, axis=0)
std = np.std(train_input, axis=0)

print(mean, std)

train_scaled = (train_input - mean) / std

"""test data도 train data처럼 scale을 표준화 해줘야하는데 그대로 적용해 이상한 그래프 그려짐"""

plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(25, 150, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

new = ([25, 150] - mean) / std
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(new[0], new[1], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

kn.fit(train_scaled, train_target) # train data scaled한 값 학습시키기

test_scaled = (test_input - mean) / std # test data도 train과 동일한 방식으로 scaled 해주기

kn.score(test_scaled, test_target)

print(kn.predict([new]))

distances, indexes = kn.kneighbors([new]) # test 값과 가장 가까운 5개의 값의 거리와 index 추출
plt.scatter(train_scaled[:,0], train_scaled[:,1]) # 표준화된 train_scaled의 길이(0)와 무게(1)을 blue로 그려줌(train_input에서 평균과 표준편차로 표준화 시킴)
plt.scatter(new[0], new[1], marker='^') # test 값의 길이와 무게를 세모로 표시
plt.scatter(train_scaled[indexes,0], train_scaled[indexes,1], marker='D') # indexes에 저장된 5가지의 값의 인덱스로 길이와 무게 추출, 마름모로 표시
plt.xlabel('length') # x축은 length로 표시
plt.ylabel('weight') # y축은 weight로 표시
plt.show()