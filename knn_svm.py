# -*- coding: utf-8 -*-
"""KNN / SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EfZrvMRCiL5V5qih-_7ebcsdHG-mx72p
"""

import pandas as pd
import seaborn as sns

df = sns.load_dataset('titanic')

print(df.head())

print(df.info())

rdf = df.drop(['deck','embark_town'], axis=1)
print(rdf.columns.values)

rdf = rdf.dropna(subset=['age'], how='any', axis=0)
print(len(rdf))

most_freq = rdf['embarked'].value_counts(dropna=True).idxmax()
print(most_freq)
print('\n')

print(rdf.describe(include='all'))
print('\n')

rdf['embarked'].fillna(most_freq, inplace=True)

ndf = rdf[['survived','pclass','sex','age','sibsp','parch','embarked']]
print(ndf.head())

onehot_sex = pd.get_dummies(ndf['sex'])     # 범주형을 숫자형으로 변환
ndf = pd.concat([ndf, onehot_sex], axis=1)  # 변환한 것을 column으로 추가
onehot_embarked = pd.get_dummies(ndf['embarked'], prefix='town') # 범주형을 숫자형으로 변환, 이름은 town 붙여주기
ndf = pd.concat([ndf, onehot_embarked], axis=1) # 변환한 것을 column으로 추가

ndf.drop(['sex', 'embarked'], axis=1, inplace=True) # 기존 column은 제거
print(ndf.head())

X = ndf[['pclass','age','sibsp','parch','female','male','town_C',"town_Q",'town_S']]
y = ndf['survived']

from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X) # Scale화 해주기, 학습 # StandardScaler().fit_transform(X) 도 가능
from sklearn.model_selection import train_test_split   # train data, test data 7:3으로 나눠주기
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=10)

print('train data 개수: ', X_train.shape)
print('test data 개수: ', X_test.shape)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(X_train, y_train)

y_hat = knn.predict(X_test)

print(y_hat[0:10])
print(y_test.values[0:10])

from sklearn import metrics
knn_matrix = metrics.confusion_matrix(y_test, y_hat)
print(knn_matrix)

knn_report = metrics.classification_report(y_test, y_hat)
print(knn_report)

"""### SVM 모형"""

from sklearn import svm # SVB 분류 모형 가져오기
svm_model = svm.SVC(kernel='rbf') # 모형 객체 생성/rbf(차원형성)
svm_model.fit(X_train, y_train) # train data로 모형 학습
y_hat = svm_model.predict(X_test) # test data로 y_hat 예측(분류)
print(y_hat[0:10])
print(y_test.values[0:10])

from sklearn import metrics
svm_matrix = metrics.confusion_matrix(y_test, y_hat)
print(svm_matrix)
print('\n')

svm_report = metrics.classification_report(y_test, y_hat)
print(svm_report)