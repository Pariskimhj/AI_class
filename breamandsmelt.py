# -*- coding: utf-8 -*-
"""BreamAndSmelt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eV3FmRzpNZI64p6OlBTv0hvxJqYv1wRf

## CH 1-03

Binary Classification

도미 데이터(길이, 무게)
"""

bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

"""도미 데이터 산점도 / 길이와 무게의 상관 관계"""

import matplotlib.pyplot as plt

plt.scatter(bream_length, bream_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

"""빙어 데이터(길이, 무게)"""

smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

"""빙어와 도미의 길이, 무게 산점도(purple: 빙어, blue: 도미)

빙어는 길이와 무게의 상관관계가 약하고
도미는 길이와 무게의 상관관계가 비례 관계에 있다
"""

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight, color='purple')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

"""도미와 빙어의 길이, 무게 데이터 병합

fish data = [[길이, 무게], [길이, 무게], ... ] # 2차원 리스트
"""

length = bream_length + smelt_length
weight = bream_weight + smelt_weight

fish_data = [[l,w] for l, w in zip(length, weight) ]
print(type(fish_data))

"""지도학습의 정답 알려주기

도미는 1, 빙어는 0 (보통 1은 찾으려고 하는 대상)
"""

fish_target = [1] * 35 + [0] * 14
print(fish_target)

"""머신러닝 학습 모델 KNeighborsClassifier(k-최근접 이웃 알고리즘) 불러오기 

fit으로 데이터를 정답으로 학습

score로 모델의 정확도 파악
"""

from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(fish_data, fish_target)
kn.score(fish_data, fish_target)

"""주어진 [[길이, 무게]] 데이터가 도미인지 빙어인지 예측
1이면 도미, 2이면 빙어
"""

kn.predict([[30, 600]])

"""학습 모델은 fish_data를 가지고 있음."""

print(kn._fit_X)

"""fish_target도 알고 있음"""

print(kn._y)

"""참고 데이터를 49로 한 kn49모델

49개를 참고하여 예측
"""

kn49 = KNeighborsClassifier(n_neighbors=49)

kn49.fit(fish_data, fish_target)
kn49.score(fish_data, fish_target)

"""kn49 모델은 가장 가까운 데이터 49개를 참고하는데 

지금은 49개가 전체 데이터 개수이기 때문에 

49개 중 35개를 차지하는 도미 데이터가 다수이기 때문에 

이 모델에서는 어떠한 값을 넣어도 도미를 예측함(즉, 1을 출력함)

49개와의 직선거리를 그려 가장 가까이에 많이 있는 데이터로 예측하기 때문에 어떠한 값을 넣어도 도미로 예측함
"""

print(35/49)

kn49.predict([[15, 10]])

"""5부터 49까지 n_neighbors 값을 설정해보고 정확도가 1이 아니게 되는 n 값 찾기"""

for n in range(5, 50):
    # k-최근접 이웃 개수 설정
    kn.n_neighbors = n
    # 점수 계산
    score = kn.score(fish_data, fish_target)
    # 100% 정확도에 미치지 못하는 이웃 개수 출력
    if score < 1:
        print(n, score)
        break



